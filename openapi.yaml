openapi: 3.0.0
info:
  title: Task Management API
  version: 1.0.0
  description: A comprehensive RESTful API for managing tasks, users, and notifications.

servers:
  - url: http://localhost:5000
    description: Local server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
        number:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: The user's phone number with country code (E.164 format)
        roles:
          type: array
          items:
            type: string
            enum: [User, Manager, Admin]
        team:
          type: string
          nullable: true
        notificationPreferences:
          type: string
          enum: [email, sms]

      required:
        - username
        - email
        - password
        - number
    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        dueDate:
          type: string
          format: date
        priority:
          type: string
          enum: [Low, Medium, High]
        status:
          type: string
          enum: [Pending, In Progress, Completed]
          default: Pending
        createdBy:
          type: string
          format: uuid
        assignedTo:
          type: string
          format: uuid
        assignedBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - title
        - description
        - dueDate
        - priority
    Team:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Name of the team
        manager:
          type: string
          format: uuid
          description: ID of the manager (User reference)
        members:
          type: array
          description: List of members in the team
          items:
            type: string
            format: uuid
            description: IDs of team members (User references)
      required:
        - name
        - manager
    BlacklistedToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the blacklisted token entry
        token:
          type: string
          description: The JWT token that has been blacklisted
        createdAt:
          type: string
          format: date-time
          description: The time at which the token was blacklisted
      required:
        - token
paths:
  /api/users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                number:
                  type: string
                  pattern: '^\+[1-9]\d{1,14}$'
                  description: The user's phone number with country code (E.164 format)
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input

  /api/users/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    description: JWT token to be used for authenticated requests.

        '401':
          description: Unauthorized
        '400':
          description: Invalid input

  /api/users/logout:
    post:
      summary: Log out the authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User logged out successfully

  /api/users/profile:
    get:
      summary: Get authenticated user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/users/createTeam:
    post:
      summary: Create a new team
      description: Creates a new team and assigns a manager to the team. Only accessible by Admins and Managers.
      tags:
        - Teams
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Development Team"
                  description: The name of the team to be created.
              required:
                - name
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    format: uuid
                    example: "64f7b27e8b2e0c5c7b0e0c5c"
                  name:
                    type: string
                    example: "Development Team"
                  manager:
                    type: string
                    format: uuid
                    example: "64f7b27e8b2e0c5c7b0e0c5d"
        '400':
          description: A team with this name already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "A team with this name already exists."
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized access."
        '403':
          description: Forbidden - Access denied for unauthorized roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access denied."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error."
                  error:
                    type: string
                    example: "Error details"

  /api/users/addMember:
    post:
      summary: Add a member to a team
      description: Adds a user to a specific team. Only accessible by Admins and Managers.
      tags:
        - Teams
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                teamId:
                  type: string
                  format: uuid
                  example: "64f7b27e8b2e0c5c7b0e0c5c"
                  description: The ID of the team to which the user will be added.
                userId:
                  type: string
                  format: uuid
                  example: "64f7b27e8b2e0c5c7b0e0c5d"
                  description: The ID of the user to be added to the team.
              required:
                - teamId
                - userId
      responses:
        '200':
          description: User added to the team successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User added to the team."
        '400':
          description: Bad request - User is already in a team
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is already in a team."
        '403':
          description: Forbidden - Manager can only add members to their own team
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You can only add members to your own team."
        '404':
          description: Not found - Team or User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Team or User not found."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error."
                  error:
                    type: string
                    example: "Error details"

  /api/users/getAllMembers:
    get:
      summary: Retrieve all team members managed by the authenticated manager
      description: Retrieves a list of all members in teams managed by the authenticated manager. Only accessible by Admins and Managers.
      tags:
        - Teams
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of all members grouped by team name
          content:
            application/json:
              schema:
                type: object
                properties:
                  teams:
                    type: array
                    items:
                      type: object
                      properties:
                        teamName:
                          type: string
                          example: "Development Team"
                        members:
                          type: array
                          items:
                            type: object
                            properties:
                              _id:
                                type: string
                                format: uuid
                                example: "64f7b27e8b2e0c5c7b0e0c5c"
                              username:
                                type: string
                                example: "john_doe"
                              email:
                                type: string
                                example: "john.doe@example.com"
                              roles:
                                type: array
                                items:
                                  type: string
                                example: ["User"]
        '404':
          description: No teams found for the authenticated manager
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No teams found for this manager."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error."

  /api/users/updatePreference:
    put:
      summary: Update user notification preferences
      description: Allows an authenticated user to update their notification preferences (email or SMS).
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                preference:
                  type: string
                  enum: ["email", "sms"]
                  example: "email"
              required:
                - preference
      responses:
        '200':
          description: Successfully updated notification preferences
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Notification preferences updated"
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        format: uuid
                        example: "64f7b27e8b2e0c5c7b0e0c5c"
                      username:
                        type: string
                        example: "john_doe"
                      email:
                        type: string
                        example: "john.doe@example.com"
                      notificationPreferences:
                        type: string
                        enum: ["email", "sms"]
                        example: "sms"
        '400':
          description: Invalid notification preference
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid notification preference"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating notification preferences"
                  error:
                    type: string
                    example: "Internal server error."

  /api/tasks/createTask:
    post:
      summary: Create a new task
      description: Allows a manager or admin to create a new task.
      tags:
        - Tasks
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Complete project report"
                description:
                  type: string
                  example: "Finalize and submit the project report by the due date."
                dueDate:
                  type: string
                  format: date
                  example: "2024-09-15"
                priority:
                  type: string
                  enum: ["Low", "Medium", "High"]
                  example: "High"
                status:
                  type: string
                  enum: ["Pending", "In Progress", "Completed"]
                  example: "Pending"
              required:
                - title
                - description
                - dueDate
                - priority
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task created successfully"
                  task:
                    type: object
                    properties:
                      _id:
                        type: string
                        format: uuid
                        example: "64f7b27e8b2e0c5c7b0e0c5c"
                      title:
                        type: string
                        example: "Complete project report"
                      description:
                        type: string
                        example: "Finalize and submit the project report by the due date."
                      dueDate:
                        type: string
                        format: date
                        example: "2024-09-15"
                      priority:
                        type: string
                        enum: ["Low", "Medium", "High"]
                        example: "High"
                      status:
                        type: string
                        enum: ["Pending", "In Progress", "Completed"]
                        example: "Pending"
                      createdBy:
                        type: string
                        format: uuid
                        example: "64f7b27e8b2e0c5c7b0e0c5c"
                      createdAt:
                        type: string
                        format: date-time
                        example: "2024-09-03T12:34:56Z"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2024-09-03T12:34:56Z"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input"
        '403':
          description: Forbidden - User does not have permission to create a task
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to create a task."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"
                  error:
                    type: string
                    example: "Internal server error."

  /api/tasks/getTasks:
    get:
      summary: Retrieve tasks assigned to the logged-in user
      description: Allows a user to retrieve their assigned tasks with optional filtering by priority and status, and sorting by due date, priority, or status.
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: priority
          schema:
            type: string
            example: "Low,Medium"
          description: Filter tasks by priority (comma-separated values).
        - in: query
          name: status
          schema:
            type: string
            example: "Pending,Completed"
          description: Filter tasks by status (comma-separated values).
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [dueDate, priority, status]
            default: "dueDate"
          description: Sort tasks by 'dueDate', 'priority', or 'status'.
      responses:
        '200':
          description: List of tasks assigned to the user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "64f7b27e8b2e0c5c7b0e0c5c"
                    title:
                      type: string
                      example: "Complete project report"
                    description:
                      type: string
                      example: "Finalize and submit the project report by the due date."
                    dueDate:
                      type: string
                      format: date
                      example: "2024-09-15"
                    priority:
                      type: string
                      enum: ["Low", "Medium", "High"]
                      example: "High"
                    status:
                      type: string
                      enum: ["Pending", "In Progress", "Completed"]
                      example: "Pending"
                    createdBy:
                      type: string
                      format: uuid
                      example: "64f7b27e8b2e0c5c7b0e0c5c"
                    assignedTo:
                      type: string
                      format: uuid
                      example: "64f7b27e8b2e0c5c7b0e0c5c"
                    assignedBy:
                      type: string
                      format: uuid
                      example: "64f7b27e8b2e0c5c7b0e0c5c"
                    createdAt:
                      type: string
                      format: date-time
                      example: "2024-09-03T12:34:56Z"
                    updatedAt:
                      type: string
                      format: date-time
                      example: "2024-09-03T12:34:56Z"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"
                  error:
                    type: string
                    example: "Internal server error."

  /api/tasks/update/{taskId}:
    put:
      summary: Update a task
      description: Allows a Manager or Admin to update an existing task.
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
            example: "64f7b27e8b2e0c5c7b0e0c5c"
          description: The ID of the task to be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "New task title"
                description:
                  type: string
                  example: "Updated description of the task."
                dueDate:
                  type: string
                  format: date
                  example: "2024-09-20"
                priority:
                  type: string
                  enum: ["Low", "Medium", "High"]
                  example: "Medium"
                status:
                  type: string
                  enum: ["Pending", "In Progress", "Completed"]
                  example: "In Progress"
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task updated successfully"
                  task:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "64f7b27e8b2e0c5c7b0e0c5c"
                      title:
                        type: string
                        example: "New task title"
                      description:
                        type: string
                        example: "Updated description of the task."
                      dueDate:
                        type: string
                        format: date
                        example: "2024-09-20"
                      priority:
                        type: string
                        enum: ["Low", "Medium", "High"]
                        example: "Medium"
                      status:
                        type: string
                        enum: ["Pending", "In Progress", "Completed"]
                        example: "In Progress"
                      createdBy:
                        type: string
                        format: uuid
                        example: "64f7b27e8b2e0c5c7b0e0c5c"
                      assignedTo:
                        type: string
                        format: uuid
                        example: "64f7b27e8b2e0c5c7b0e0c5c"
                      assignedBy:
                        type: string
                        format: uuid
                        example: "64f7b27e8b2e0c5c7b0e0c5c"
                      createdAt:
                        type: string
                        format: date-time
                        example: "2024-09-03T12:34:56Z"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2024-09-03T12:34:56Z"
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"
                  error:
                    type: string
                    example: "Internal server error."

  /api/tasks/delete/{taskId}:
    delete:
      summary: Delete a task
      description: Allows a Manager or Admin to delete a task.
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
            example: "64f7b27e8b2e0c5c7b0e0c5c"
          description: The ID of the task to be deleted.
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task deleted successfully"
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"
                  error:
                    type: string
                    example: "Internal server error."

  /api/tasks/updateStatus:
    put:
      summary: Update the status of a task
      description: Allows a user to update the status of a task that is assigned to them.
      tags:
        - Tasks
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                taskId:
                  type: string
                  example: "64f7b27e8b2e0c5c7b0e0c5c"
                  description: The ID of the task to be updated.
                status:
                  type: string
                  enum: ['Pending', 'In Progress', 'Completed']
                  example: "In Progress"
                  description: The new status of the task.
      responses:
        '200':
          description: Task status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task status updated successfully"
                  task:
                    type: object
                    description: Details of the updated task
                    properties:
                      _id:
                        type: string
                        example: "64f7b27e8b2e0c5c7b0e0c5c"
                      title:
                        type: string
                        example: "Sample Task"
                      status:
                        type: string
                        example: "In Progress"
        '403':
          description: Unauthorized access to update the task
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to update this task status"
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task not found"
        '500':
          description: Error updating task status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating task status"

  /api/tasks/updateAssignee/{taskId}:
    put:
      summary: Update the assignee of a task
      description: Allows a manager or admin to update the assignee of a specified task.
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
            example: "64f7b27e8b2e0c5c7b0e0c5c"
          description: The ID of the task to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "64f7b27e8b2e0c5c7b0e0c5d"
                  description: The ID of the user to whom the task is to be assigned.
      responses:
        '200':
          description: Task assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task assigned successfully"
                  task:
                    type: object
                    description: Details of the updated task
                    properties:
                      _id:
                        type: string
                        example: "64f7b27e8b2e0c5c7b0e0c5c"
                      title:
                        type: string
                        example: "Sample Task"
                      assignedTo:
                        type: string
                        example: "64f7b27e8b2e0c5c7b0e0c5d"
        '404':
          description: Task or User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task not found"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"

  /api/tasks/assign/{taskId}:
    post:
      summary: Assign a task to a user
      description: Assigns a specific task to a user based on the provided task ID and user ID.
      operationId: assignTask
      tags:
        - Tasks
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the task to be assigned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the user to whom the task will be assigned.
              required:
                - userId
      responses:
        '200':
          description: Task assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task assigned successfully
                  task:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      assignedTo:
                        type: string
                      assignedBy:
                        type: string
        '400':
          description: Bad request, e.g., task already assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cannot assign, This task is already assigned to someone.
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server Error
                  error:
                    type: string
                    example: Error message

  /api/tasks/assignedByManager:
    get:
      summary: View tasks assigned by the logged-in manager
      description: Retrieves all tasks assigned by the manager who is currently authenticated.
      operationId: viewAssignedTasksByManager
      tags:
        - Tasks
      responses:
        '200':
          description: Successfully retrieved tasks assigned by the manager
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        description:
                          type: string
                        assignedTo:
                          type: object
                          properties:
                            id:
                              type: string
                            username:
                              type: string
                            email:
                              type: string
                        assignedBy:
                          type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server Error
                  error:
                    type: string
                    example: Error message

security:
  - BearerAuth: []

